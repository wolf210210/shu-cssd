/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import floodclasses.Location;
import floodclasses.Sensor;
import floodclasses.SensorMonitor;
import floodclasses.SetOfLocation;
import floodclasses.SetOfUsers;
import floodclasses.User;
import java.awt.Container;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import serialization.Serialization;

/**
 *
 * @author wolf
 */
public class SensorObserverMap extends javax.swing.JFrame {

    /**
     * Creates new form SensorObserverMap
     */
    
    public static final String  FILE_NAME_Users_FloodSensor = "DataFiles/FILE_NAME_Users_FloodSensor.txt"; 
          public static final String  FILE_NAME_Set_Users_FloodSensor1 = "DataFiles/FILE_NAME_Set_Users_FloodSensor1.txt"; 
            public static final String  FILE_NAME_Set_Users_FloodSensorTwo = "DataFiles/FILE_NAME_Set_Users_FloodSensorTwo.txt";
             public static final String  FILE_NAME_Set_Users_FloodSensorThree = "DataFiles/FILE_NAME_Set_Users_FloodSensorThree.txt";
                public static SetOfUsers theUsersObserver1 = new SetOfUsers();
                private  SensorMonitor sensorSet = new SensorMonitor();
                public static SetOfUsers theUsers = new SetOfUsers();
                public static SetOfUsers theUsersSet = new SetOfUsers();
                private SensorMonitor notMobile=new SensorMonitor();
                private SetOfLocation locationSet1 = new SetOfLocation();
                private  SensorMonitor sensorSet1 = new SensorMonitor();
              
                private  SensorMonitor sensorSetTwo = new SensorMonitor();
                private SetOfLocation locationSetTwo = new SetOfLocation();
                public static SetOfUsers theUsersObserverTwo = new SetOfUsers();
                
                private  SensorMonitor sensorSetThree = new SensorMonitor();
                private SetOfLocation locationSetThree = new SetOfLocation();
                public static SetOfUsers theUsersObserverThree= new SetOfUsers();
                
                private  SensorMonitor sensorSetClock = new SensorMonitor();
                SetOfLocation setOfLocation;
                int on1 = 20;
                 int on2 =20;
    public SensorObserverMap() {
        initComponents();
         
    
          loadObserverOne();
            loadObserverTwo();
            loadObserverThree() ;
              load();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Show table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(342, 342, 342)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(142, 142, 142)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap(235, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if(jComboBox1.getSelectedIndex()==0){
            TableLoadObserver(theUsersObserver1);
        }
        else   if(jComboBox1.getSelectedIndex()==1){
            TableLoadObserver(theUsersObserverTwo);
        }
        else   if(jComboBox1.getSelectedIndex()==2){
            TableLoadObserver(theUsersObserverThree);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    
             public void setObserver(SensorMonitor sensorMoni){
            
            Location location ;
                            int i = 0;
                    if (sensorMoni.size() != 0) {
                        for (Sensor sensors : sensorMoni) {
                          if(i ==0){
                              System.out.println(sensors.getSensorNo());
                               sensorSet1.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                               sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                               jComboBox1.addItem(sensors.getName());
                               if(sensors.getfrequency() >100){
                                     sensorSet1.setAvailability("Warnning");
                                    TableLoadObserver(theUsersObserver1);
                                    
                                        SetLabel(sensors.getName());
                               }
                          }
                            if(i ==1){
                                System.out.println(sensors.getSensorNo());
                               sensorSetTwo.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                jComboBox1.addItem(sensors.getName());    
                                if(sensors.getfrequency() >100){
                                           sensorSetTwo.setAvailability("Warnning");
                                    TableLoadObserver(theUsersObserverTwo);
                                   
                                       SetLabel(sensors.getName());
                               }
                            }
                              if(i ==2){System.out.println(sensors.getSensorNo());
                               sensorSetThree.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                 sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                jComboBox1.addItem(sensors.getName());
                                 if(sensors.getfrequency() >100){
                                    sensorSetThree.setAvailability("Warnning");
                                    TableLoadObserver(theUsersObserverThree);
                                          
                                             SetLabel(sensors.getName());
                               }
                              }

                            i++;

                        }
                    }
            
            
                             
            
         }
             
             
                     private void loadObserverOne() {
        try {
            for (User member : Serialization.deserializeFloodUsersOne()) {
                 sensorSet1.registerObserver(member);
                 theUsersObserver1.add(member);
//               TableLoadObserver(theUsersObserver1);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
           
          private void loadObserverTwo() {
        try {
            for (User member : Serialization.deserializeFloodUsersTwo()) {
                 sensorSetTwo.registerObserver(member);
                 theUsersObserverTwo.add(member);
//                 TableLoadObserver(theUsersObserverTwo);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
          
          
      private void loadObserverThree() {
        try {
            for (User member : Serialization.deserializeFloodUsersThree()) {
                 sensorSetThree.registerObserver(member);
                 theUsersObserverThree.add(member);
//                 TableLoadObserver(theUsersObserverTwo);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
      
                      public void load(){
        try { 
             for (Sensor sensors : Serialization.deserializeFloodSensors()) {
                         sensorSet.addNewSensor(sensors);
                       
//                          products.print();
            }
        } catch (IOException | ClassNotFoundException  ex) {
            JOptionPane.showMessageDialog(this, ex);
        
        }
       
          setObserver(sensorSet);
    }  
      
     public void TableLoadObserver( SetOfUsers searchList) {
        String[] colName = {"User ID", "First Name", "Address", "Email", "Mobile Number", "Availabiliy"};
        Object[][] object = new Object[searchList.size()][6];
        int i = 0;
        if (searchList.size() != 0) {
            for (User member : searchList) {
                object[i][0] = member.getMemberNumber();
                object[i][1] = member.getName();
                object[i][2] = member.getAddress();
                object[i][3] = member.getUsername();
                object[i][4] = member.getMobile();
                object[i][5] = member.getAvailabiliy();

                i++;

            }
        }
        
        DefaultTableModel model = new DefaultTableModel(object, colName) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        jTable1.setModel(model);
        jTable1.setRowSorter(new TableRowSorter<>(model));
        jTable1.setAutoscrolls(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
     }

     
     public void Save(){

                    try {
                        Serialization.Serialize(theUsersObserver1, FILE_NAME_Set_Users_FloodSensor1);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        
        
    
                    try {
                        Serialization.Serialize(theUsersObserverTwo, FILE_NAME_Set_Users_FloodSensorTwo);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        
      
      
                    try {
                        Serialization.Serialize(theUsersObserverThree, FILE_NAME_Set_Users_FloodSensorThree);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        
     }
     
     public void SetLabel(String name){
         System.out.println("New Field...");
                            Container contentPane = getContentPane();
                            JLabel label = new JLabel (name);
                            
                        label.setBounds(10,10,50,50);
                           label.setLocation( on1,  on2);
                         jLabel1.add(label);

                        jLabel1.revalidate();
                        jLabel1.repaint();
                        this.pack();
                        on1 =on1 +10 ; 
                        on2 = on2 + 20; 
     }
  
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SensorObserverMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SensorObserverMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SensorObserverMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SensorObserverMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SensorObserverMap().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
