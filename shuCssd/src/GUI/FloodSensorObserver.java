/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
//import floodclasses.SensorMonitor;
import floodclasses.Clock;
import floodclasses.SensorMonitor;
import floodclasses.Location;
import floodclasses.Sensor;
import floodclasses.SetOfLocation;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import serialization.Serialization;
import floodclasses.SetOfUsers;
import floodclasses.User;

/**
 *
 * @author wolf
 */
public class FloodSensorObserver extends javax.swing.JFrame {

    /**
     * Creates new form FloodSensorObserver
     */
         public static final String  FILE_NAME_Users_FloodSensor = "DataFiles/FILE_NAME_Users_FloodSensor.txt"; 
          public static final String  FILE_NAME_Set_Users_FloodSensor1 = "DataFiles/FILE_NAME_Set_Users_FloodSensor1.txt"; 
            public static final String  FILE_NAME_Set_Users_FloodSensorTwo = "DataFiles/FILE_NAME_Set_Users_FloodSensorTwo.txt";
             public static final String  FILE_NAME_Set_Users_FloodSensorThree = "DataFiles/FILE_NAME_Set_Users_FloodSensorThree.txt";
                public static SetOfUsers theUsersObserver1 = new SetOfUsers();
                private  SensorMonitor sensorSet = new SensorMonitor();
                public static SetOfUsers theUsers = new SetOfUsers();
                public static SetOfUsers theUsersSet = new SetOfUsers();
                private SensorMonitor notMobile=new SensorMonitor();
                private SetOfLocation locationSet1 = new SetOfLocation();
                private  SensorMonitor sensorSet1 = new SensorMonitor();
              
                private  SensorMonitor sensorSetTwo = new SensorMonitor();
                private SetOfLocation locationSetTwo = new SetOfLocation();
                public static SetOfUsers theUsersObserverTwo = new SetOfUsers();
                
                private  SensorMonitor sensorSetThree = new SensorMonitor();
                private SetOfLocation locationSetThree = new SetOfLocation();
                public static SetOfUsers theUsersObserverThree= new SetOfUsers();
                
                private  SensorMonitor sensorSetClock = new SensorMonitor();
                
                public  Clock clock ;
    public FloodSensorObserver() {
        initComponents();
         clock = Clock.getInstance();
         load();
//        setObserver();
          
          getUser();
          loadObserverOne();
            loadObserverTwo();
            loadObserverThree() ;
            
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton10 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        userID = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lastName = new javax.swing.JTextField();
        firstName = new javax.swing.JTextField();
        userID1 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        city = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        mobile = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        add = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton10.setText("save");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton9.setText("Remove From table ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton6.setText("notifyObservers");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setText("Remove observer ");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        jButton5.setText("observer user");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel13.setText("notify");

        jLabel14.setText("user no");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setText("All user");

        lastName.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lastName.setForeground(new java.awt.Color(102, 102, 102));
        lastName.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        firstName.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        firstName.setForeground(new java.awt.Color(102, 102, 102));
        firstName.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        userID1.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        userID1.setForeground(new java.awt.Color(102, 102, 102));
        userID1.setText("Cus-001");

        address.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        address.setForeground(new java.awt.Color(102, 102, 102));
        address.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        city.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        city.setForeground(new java.awt.Color(102, 102, 102));
        city.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        password.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        password.setForeground(new java.awt.Color(102, 102, 102));
        password.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mobile.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        mobile.setForeground(new java.awt.Color(102, 102, 102));
        mobile.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mobileKeyTyped(evt);
            }
        });

        email.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        email.setForeground(new java.awt.Color(102, 102, 102));
        email.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Mobile Number   :");

        jLabel30.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(102, 102, 102));
        jLabel30.setText("Password            :");
        jLabel30.setToolTipText("");

        jLabel29.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(102, 102, 102));
        jLabel29.setText("Email                  :");

        jLabel28.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(102, 102, 102));
        jLabel28.setText("City                     :");

        jLabel23.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(102, 102, 102));
        jLabel23.setText("Address              :");

        jLabel19.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("Last Name          : ");
        jLabel19.setToolTipText("");

        jLabel8.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("First Name          :");

        jLabel7.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("User Level           :");

        jLabel10.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("User ID               :");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        jTable2.setForeground(new java.awt.Color(153, 153, 153));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable2.setFillsViewportHeight(true);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        add.setFont(new java.awt.Font("Segoe UI Light", 0, 16)); // NOI18N
        add.setForeground(new java.awt.Color(102, 102, 102));
        add.setText("Add User");
        add.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        add.setContentAreaFilled(false);
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Show table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(userID1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(101, 101, 101))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(40, 40, 40)
                                                .addComponent(userID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(40, 40, 40)
                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(67, 67, 67)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(335, 335, 335)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(100, 100, 100))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addGap(30, 30, 30)
                                .addComponent(jButton6)
                                .addGap(10, 10, 10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel14))
                                    .addComponent(userID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel13))
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)))
                        .addComponent(jButton8)
                        .addGap(15, 15, 15)
                        .addComponent(jButton9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jButton10)
                                .addGap(52, 52, 52))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addGap(37, 37, 37)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(167, 167, 167))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userID1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(mobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        if(jComboBox1.getSelectedItem()=="Item 1"){
                    try {
                        Serialization.Serialize(theUsersObserver1, FILE_NAME_Set_Users_FloodSensor1);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        }
        
      if(jComboBox1.getSelectedItem()=="Item 2"){
                    try {
                        Serialization.Serialize(theUsersObserverTwo, FILE_NAME_Set_Users_FloodSensorTwo);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        }
      
      if(jComboBox1.getSelectedItem()=="Item 3"){
                    try {
                        Serialization.Serialize(theUsersObserverThree, FILE_NAME_Set_Users_FloodSensorThree);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
                 if(jComboBox1.getSelectedItem()=="Item 1"){
                                User user = theUsersObserver1.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                                boolean status = theUsersObserver1.removeUser(user);
                                if (status) {
                                    //                      try {
                                        //                        Serialization.Serialize(theUsersObserver, FILE_NAME_Observer);
                                        //                    } catch (IOException ex) {
                                        //                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                                        //                    }
                                    JOptionPane.showMessageDialog(this, "You have deleted successful", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                                    //    clear();
                                    //                    loadObserver();
                                    TableLoadObserver(theUsersObserver1);

                                } else {
                                    JOptionPane.showMessageDialog(this, "Delete unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                    }
                 
                 else  if(jComboBox1.getSelectedItem()=="Item 2"){
                                User user = theUsersObserverTwo.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                                boolean status = theUsersObserverTwo.removeUser(user);
                                if (status) {
                                    //                      try {
                                        //                        Serialization.Serialize(theUsersObserver, FILE_NAME_Observer);
                                        //                    } catch (IOException ex) {
                                        //                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                                        //                    }
                                    JOptionPane.showMessageDialog(this, "You have deleted successful", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                                    //    clear();
                                    //                    loadObserver();
                                    TableLoadObserver(theUsersObserverTwo);

                                } else {
                                    JOptionPane.showMessageDialog(this, "Delete unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                    }
                 
                      else  if(jComboBox1.getSelectedItem()=="Item 3"){
                                User user = theUsersObserverThree.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                                boolean status = theUsersObserverThree.removeUser(user);
                                if (status) {
                                    //                      try {
                                        //                        Serialization.Serialize(theUsersObserver, FILE_NAME_Observer);
                                        //                    } catch (IOException ex) {
                                        //                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                                        //                    }
                                    JOptionPane.showMessageDialog(this, "You have deleted successful", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                                    //    clear();
                                    //                    loadObserver();
                                    TableLoadObserver(theUsersObserverThree);

                                } else {
                                    JOptionPane.showMessageDialog(this, "Delete unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
      
         if(jComboBox1.getSelectedItem()=="Item 1"){
                    User user = theUsersObserver1.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                    sensorSet1.unregisterObserver(user);
          }
          else  if(jComboBox1.getSelectedItem()=="Item 2"){
                    User user = theUsersObserverTwo.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                    sensorSetTwo.unregisterObserver(user);
          }
          else if(jComboBox1.getSelectedItem()=="Item 3"){
                    User user = theUsersObserverThree.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                    sensorSetThree.unregisterObserver(user);
          }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
            if(jComboBox1.getSelectedItem()=="Item 1"){
      
                sensorSet1.setAvailability(jTextField2.getText());
                TableLoadObserver(theUsersObserver1);
          }
            else if(jComboBox1.getSelectedItem()=="Item 2"){
      
                sensorSetTwo.setAvailability(jTextField2.getText());
                TableLoadObserver(theUsersObserverTwo);
          }
               else if(jComboBox1.getSelectedItem()=="Item 3"){
      
                sensorSetThree.setAvailability(jTextField2.getText());
                TableLoadObserver(theUsersObserverThree);
          }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        User user = theUsers.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();

        if(jComboBox1.getSelectedItem()=="Item 1"){
                sensorSet1.registerObserver(user);
                theUsersObserver1.add(user);
                try {
                    Serialization.Serialize(theUsersObserver1, FILE_NAME_Set_Users_FloodSensor1);

                    System.out.println("Add Observer Sucsessfully");
                    TableLoadObserver(theUsersObserver1);
                } catch (IOException ex) {

                    System.out.println("Unsuccessful...");
                }
         }
        
        
        
          if(jComboBox1.getSelectedItem()=="Item 2"){
                sensorSetTwo.registerObserver(user);
                theUsersObserverTwo.add(user);
                try {
                    Serialization.Serialize(theUsersObserverTwo, FILE_NAME_Set_Users_FloodSensorTwo);

                    System.out.println("Add Observer Sucsessfully");
                    TableLoadObserver(theUsersObserverTwo);
                } catch (IOException ex) {

                    System.out.println("Unsuccessful...");
                }
         }
          
                  if(jComboBox1.getSelectedItem()=="Item 3"){
                sensorSetThree.registerObserver(user);
                theUsersObserverThree.add(user);
                try {
                    Serialization.Serialize(theUsersObserverThree, FILE_NAME_Set_Users_FloodSensorThree);

                    System.out.println("Add Observer Sucsessfully");
                    TableLoadObserver(theUsersObserverThree);
                } catch (IOException ex) {

                    System.out.println("Unsuccessful...");
                }
         }
        // notMobile.registerObserver(johnPerson);
        //                notMobile.registerObserver(piyumiPerson);

        //Now product is available
        //samsungMobile.setAvailability("Available");

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void mobileKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileKeyTyped

    }//GEN-LAST:event_mobileKeyTyped

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked

   
    }//GEN-LAST:event_jTable2MouseClicked

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
        String firstname, lastname, Address, City, Email, Mobile, Password, Password1;
        if (firstName.getText().isEmpty() || lastName.getText().isEmpty() || address.getText().isEmpty() || city.getText().isEmpty()
            || email.getText().isEmpty() || mobile.getText().isEmpty() || password.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please provide all the details...", "Error", JOptionPane.ERROR_MESSAGE);

        } else {
            //            if () {
                firstname = firstName.getText();
                lastname = lastName.getText();
                Address = address.getText();
                City = city.getText();
                Email = email.getText();
                Mobile = mobile.getText();
                Password = password.getText();
                String Levels = "User";
                String userLevels= "User";;

             
                String status = registerUser(firstname, lastname, Address, City, Email, Mobile, Password, userLevels);
                if (status.equals("success")) {
                    JOptionPane.showMessageDialog(this, "You have registered successful", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                   
                    TableLoad(theUsers);

                } else {
                    JOptionPane.showMessageDialog(this, "Registration unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                }
                //            } else {
                //                JOptionPane.showMessageDialog(this, "Please provide a valied email address...", "Error", JOptionPane.ERROR_MESSAGE);
                //
                //            }
        }
    }//GEN-LAST:event_addMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
          if(jComboBox1.getSelectedItem()=="Item 1"){
                  TableLoadObserver(theUsersObserver1);
            }
          else   if(jComboBox1.getSelectedItem()=="Item 2"){
                 TableLoadObserver(theUsersObserverTwo);
          }
            else   if(jComboBox1.getSelectedItem()=="Item 3"){
                 TableLoadObserver(theUsersObserverThree);
          }
          
             
               
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    public void TableLoad( SetOfUsers searchList) {
        String[] colName = {"User ID", "First Name", "Address", "Email", "Mobile Number"};
        Object[][] object = new Object[searchList.size()][5];
        int i = 0;
        if (searchList.size() != 0) {
            for (User member : searchList) {
                object[i][0] = member.getMemberNumber();
                object[i][1] = member.getName();
                object[i][2] = member.getAddress();
                object[i][3] = member.getUsername();
                object[i][4] = member.getMobile();
            

                i++;

            }
        }
        
        DefaultTableModel model = new DefaultTableModel(object, colName) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        jTable2.setModel(model);
        jTable2.setRowSorter(new TableRowSorter<>(model));
        jTable2.setAutoscrolls(true);
        jTable2.getTableHeader().setReorderingAllowed(false);
     }
    
       public void TableLoadObserver( SetOfUsers searchList) {
        String[] colName = {"User ID", "First Name", "Address", "Email", "Mobile Number", "Availabiliy"};
        Object[][] object = new Object[searchList.size()][6];
        int i = 0;
        if (searchList.size() != 0) {
            for (User member : searchList) {
                object[i][0] = member.getMemberNumber();
                object[i][1] = member.getName();
                object[i][2] = member.getAddress();
                object[i][3] = member.getUsername();
                object[i][4] = member.getMobile();
                object[i][5] = member.getAvailabiliy();

                i++;

            }
        }
        
        DefaultTableModel model = new DefaultTableModel(object, colName) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        jTable1.setModel(model);
        jTable1.setRowSorter(new TableRowSorter<>(model));
        jTable1.setAutoscrolls(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
     }
     

       
       
               public void setObserver(SensorMonitor sensorMoni){
            
                            int i = 0;
                    if (sensorMoni.size() != 0) {
                        for (Sensor sensors : sensorMoni) {
                          if(i ==0){
                              System.out.println(sensors.getSensorNo());
                               sensorSet1.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                               sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                          }
                            if(i ==1){
                                System.out.println(sensors.getSensorNo());
                               sensorSetTwo.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                            }
                              if(i ==2){System.out.println(sensors.getSensorNo());
                               sensorSetThree.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                 sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                              }

                            i++;

                        }
                    }
            clock.registerObserver(sensorSetClock);
            
                             
            
         }
               
                  public void load(){
        try { 
             for (Sensor sensors : Serialization.deserializeFloodSensors()) {
                         sensorSet.addNewSensor(sensors);
                       
//                          products.print();
            }
        } catch (IOException | ClassNotFoundException  ex) {
            JOptionPane.showMessageDialog(this, ex);
        
        }
       
          setObserver(sensorSet);
    }  
       
       
     public String registerUser(String firstName, String lastName, String address, String city, String email, String mobile, String password, String userLevels) {
        String status = "";
        new User.SingletonBuilder(firstName, lastName, address, userLevels, email, mobile, password).city(city).build();
        theUsers.addUser(User.getInstance());
        try {
            Serialization.Serialize(theUsers, FILE_NAME_Users_FloodSensor);
            status = "success";
        } catch (Exception ex) {
            status = "fail";
            System.out.println(ex.getMessage());
        }

        return status;
    }
            
        public void getUser(){
                try {
            for (User member : Serialization.deserializeFloodUsers()) {
                theUsers.addUser(member);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        TableLoad(theUsers);
            }
        
           private void loadObserverOne() {
        try {
            for (User member : Serialization.deserializeFloodUsersOne()) {
                 sensorSet1.registerObserver(member);
                 theUsersObserver1.add(member);
//               TableLoadObserver(theUsersObserver1);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
           
          private void loadObserverTwo() {
        try {
            for (User member : Serialization.deserializeFloodUsersTwo()) {
                 sensorSetTwo.registerObserver(member);
                 theUsersObserverTwo.add(member);
//                 TableLoadObserver(theUsersObserverTwo);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
          
          
      private void loadObserverThree() {
        try {
            for (User member : Serialization.deserializeFloodUsersThree()) {
                 sensorSetThree.registerObserver(member);
                 theUsersObserverThree.add(member);
//                 TableLoadObserver(theUsersObserverTwo);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FloodSensorObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FloodSensorObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FloodSensorObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FloodSensorObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FloodSensorObserver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField address;
    private javax.swing.JTextField city;
    private javax.swing.JTextField email;
    private javax.swing.JTextField firstName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField lastName;
    private javax.swing.JTextField mobile;
    private javax.swing.JTextField password;
    private javax.swing.JTextField userID;
    private javax.swing.JLabel userID1;
    // End of variables declaration//GEN-END:variables
}
