/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
//import floodclasses.SensorMonitor;
import Validations.Validation;
import floodclasses.Clock;
import floodclasses.SensorMonitor;
import floodclasses.Location;
import floodclasses.Sensor;
import floodclasses.SetOfLocation;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import serialization.Serialization;
import floodclasses.SetOfUsers;
import floodclasses.User;

/**
 *
 * @author wolf
 */
public class FloodSensorObserver extends javax.swing.JFrame {

    /**
     * Creates new form FloodSensorObserver
     */
         public static final String  FILE_NAME_Users_FloodSensor = "DataFiles/FileNnameUsersFloodSensor.txt"; 
          public static final String  FILE_NAME_Set_Users_FloodSensor1 = "DataFiles/FileNameSetUsersFloodSensorOne.txt"; 
            public static final String  FILE_NAME_Set_Users_FloodSensorTwo = "DataFiles/FileNameSetUsersFloodSensorTwo.txt";
             public static final String  FILE_NAME_Set_Users_FloodSensorThree = "DataFiles/FileNameSetUsersFloodSensorThree.txt";
                public static SetOfUsers theUsersObserver1 = new SetOfUsers();
                private  SensorMonitor sensorSet = new SensorMonitor();
                public static SetOfUsers theUsers = new SetOfUsers();
                public static SetOfUsers theUsersSet = new SetOfUsers();
                private SensorMonitor notMobile=new SensorMonitor();
                private SetOfLocation locationSet1 = new SetOfLocation();
                private  SensorMonitor sensorSet1 = new SensorMonitor();
              
                private  SensorMonitor sensorSetTwo = new SensorMonitor();
                private SetOfLocation locationSetTwo = new SetOfLocation();
                public static SetOfUsers theUsersObserverTwo = new SetOfUsers();
                
                private  SensorMonitor sensorSetThree = new SensorMonitor();
                private SetOfLocation locationSetThree = new SetOfLocation();
                public static SetOfUsers theUsersObserverThree= new SetOfUsers();
                
                private  SensorMonitor sensorSetClock = new SensorMonitor();
                
                public  Clock clock ;
    public FloodSensorObserver() {
        initComponents();
        clock = Clock.getInstance();
         load();
//        setObserver();
          
          getUser();
          loadObserverOne();
            loadObserverTwo();
            loadObserverThree() ;
            
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        add2 = new javax.swing.JButton();
        add6 = new javax.swing.JButton();
        add5 = new javax.swing.JButton();
        add4 = new javax.swing.JButton();
        add1 = new javax.swing.JButton();
        add3 = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        statusText = new javax.swing.JComboBox<>();
        userID = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lastName = new javax.swing.JTextField();
        firstName = new javax.swing.JTextField();
        userIDLable = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        city = new javax.swing.JTextField();
        password = new javax.swing.JTextField();
        mobile = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        add = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1366, 830));
        getContentPane().setLayout(null);

        add2.setBackground(new java.awt.Color(0, 102, 153));
        add2.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        add2.setForeground(new java.awt.Color(255, 255, 255));
        add2.setText("Observer User");
        add2.setContentAreaFilled(false);
        add2.setOpaque(true);
        add2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add2MouseClicked(evt);
            }
        });
        getContentPane().add(add2);
        add2.setBounds(1040, 170, 210, 33);

        add6.setBackground(new java.awt.Color(0, 102, 153));
        add6.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        add6.setForeground(new java.awt.Color(255, 255, 255));
        add6.setText("Save");
        add6.setContentAreaFilled(false);
        add6.setOpaque(true);
        add6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add6MouseClicked(evt);
            }
        });
        getContentPane().add(add6);
        add6.setBounds(950, 580, 180, 33);

        add5.setBackground(new java.awt.Color(0, 102, 153));
        add5.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        add5.setForeground(new java.awt.Color(255, 255, 255));
        add5.setText("Remove From Table");
        add5.setContentAreaFilled(false);
        add5.setOpaque(true);
        add5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add5MouseClicked(evt);
            }
        });
        getContentPane().add(add5);
        add5.setBounds(730, 580, 209, 33);

        add4.setBackground(new java.awt.Color(0, 102, 153));
        add4.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        add4.setForeground(new java.awt.Color(255, 255, 255));
        add4.setText("Remove Observer");
        add4.setContentAreaFilled(false);
        add4.setOpaque(true);
        add4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add4MouseClicked(evt);
            }
        });
        getContentPane().add(add4);
        add4.setBounds(1140, 580, 200, 33);

        add1.setBackground(new java.awt.Color(0, 102, 153));
        add1.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        add1.setForeground(new java.awt.Color(255, 255, 255));
        add1.setText("Show Table");
        add1.setContentAreaFilled(false);
        add1.setOpaque(true);
        add1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add1MouseClicked(evt);
            }
        });
        getContentPane().add(add1);
        add1.setBounds(1040, 120, 210, 33);

        add3.setBackground(new java.awt.Color(0, 102, 153));
        add3.setFont(new java.awt.Font("Segoe UI Symbol", 1, 18)); // NOI18N
        add3.setForeground(new java.awt.Color(255, 255, 255));
        add3.setText("Notify Observers");
        add3.setContentAreaFilled(false);
        add3.setOpaque(true);
        add3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add3MouseClicked(evt);
            }
        });
        getContentPane().add(add3);
        add3.setBounds(1040, 220, 210, 33);

        delete.setBackground(new java.awt.Color(0, 102, 153));
        delete.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        delete.setText("Delete User");
        delete.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        delete.setContentAreaFilled(false);
        delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteMouseClicked(evt);
            }
        });
        getContentPane().add(delete);
        delete.setBounds(500, 450, 170, 40);

        statusText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Non-Active" }));
        getContentPane().add(statusText);
        statusText.setBounds(860, 220, 160, 30);
        getContentPane().add(userID);
        userID.setBounds(860, 170, 160, 30);

        jLabel13.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jLabel13.setText("Notify");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(770, 210, 80, 40);

        jLabel14.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jLabel14.setText("User No");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(770, 160, 80, 40);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(730, 290, 590, 280);

        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel1.setText("All user");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(150, 450, 100, 40);

        lastName.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lastName.setForeground(new java.awt.Color(102, 102, 102));
        lastName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameActionPerformed(evt);
            }
        });
        getContentPane().add(lastName);
        lastName.setBounds(340, 200, 240, 29);

        firstName.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        firstName.setForeground(new java.awt.Color(102, 102, 102));
        firstName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(firstName);
        firstName.setBounds(340, 160, 240, 29);

        userIDLable.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        userIDLable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        getContentPane().add(userIDLable);
        userIDLable.setBounds(340, 110, 240, 30);

        address.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        address.setForeground(new java.awt.Color(102, 102, 102));
        address.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(address);
        address.setBounds(340, 240, 240, 29);

        city.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        city.setForeground(new java.awt.Color(102, 102, 102));
        city.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        city.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityActionPerformed(evt);
            }
        });
        getContentPane().add(city);
        city.setBounds(340, 280, 240, 29);

        password.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        password.setForeground(new java.awt.Color(102, 102, 102));
        password.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });
        getContentPane().add(password);
        password.setBounds(340, 360, 240, 29);

        mobile.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        mobile.setForeground(new java.awt.Color(102, 102, 102));
        mobile.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileActionPerformed(evt);
            }
        });
        mobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mobileKeyTyped(evt);
            }
        });
        getContentPane().add(mobile);
        mobile.setBounds(340, 400, 240, 29);

        email.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        email.setForeground(new java.awt.Color(102, 102, 102));
        email.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        getContentPane().add(email);
        email.setBounds(340, 320, 240, 29);

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel6.setText("Mobile Number   :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(150, 400, 170, 30);

        jLabel11.setFont(new java.awt.Font("Segoe UI Light", 0, 17)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 102, 0));
        jLabel11.setText("www.Elegantro.com/floodsensorobserver.html");
        jLabel11.setToolTipText("");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(170, 10, 370, 40);

        jLabel30.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel30.setText("Password            :");
        jLabel30.setToolTipText("");
        getContentPane().add(jLabel30);
        jLabel30.setBounds(150, 360, 170, 30);

        jLabel29.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel29.setText("Email                  :");
        getContentPane().add(jLabel29);
        jLabel29.setBounds(150, 320, 170, 30);

        jLabel28.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel28.setText("City                     :");
        getContentPane().add(jLabel28);
        jLabel28.setBounds(150, 280, 170, 30);

        jLabel23.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel23.setText("Address              :");
        getContentPane().add(jLabel23);
        jLabel23.setBounds(150, 240, 170, 30);

        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 30, 30, 30);

        jLabel19.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel19.setText("Last Name          : ");
        jLabel19.setToolTipText("");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(150, 200, 170, 30);

        jLabel8.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel8.setText("First Name          :");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(150, 160, 170, 30);

        jLabel10.setFont(new java.awt.Font("Segoe UI Light", 1, 20)); // NOI18N
        jLabel10.setText("User ID               :");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(150, 110, 170, 30);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        jTable2.setForeground(new java.awt.Color(153, 153, 153));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable2.setFillsViewportHeight(true);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 500, 650, 140);

        add.setBackground(new java.awt.Color(0, 102, 153));
        add.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        add.setText("Add User");
        add.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        add.setContentAreaFilled(false);
        add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addMouseClicked(evt);
            }
        });
        getContentPane().add(add);
        add.setBounds(300, 450, 190, 40);

        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(860, 120, 160, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Back.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 1370, 810);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mobileKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileKeyTyped

    }//GEN-LAST:event_mobileKeyTyped

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
   // when user click on tbInfo table, all the information what in user selected row will want to show on Update tab
        //  load info to update tab
        DefaultTableModel dtm = (DefaultTableModel) jTable2.getModel();

        int row = jTable2.getSelectedRow();
        userIDLable.setText(jTable2.getValueAt(row, 0).toString());
        userID.setText(jTable2.getValueAt(row, 0).toString());
        firstName.setText(jTable2.getValueAt(row, 1).toString());
        address.setText(jTable2.getValueAt(row, 2).toString());
        email.setText(jTable2.getValueAt(row, 3).toString());
        mobile.setText(jTable2.getValueAt(row, 4).toString());
        User user = theUsers.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
        password.setText(user.getPassword());
        city.setText(user.getCity());
        lastName.setText(user.getLastName());
   
    }//GEN-LAST:event_jTable2MouseClicked

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addMouseClicked
  String firstname, lastname, Address, City, Email, Mobile, Password, Password1;
        if (firstName.getText().isEmpty() || lastName.getText().isEmpty() || address.getText().isEmpty() || city.getText().isEmpty()
            || email.getText().isEmpty() || mobile.getText().isEmpty() || password.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please provide all the details...", "Error", JOptionPane.ERROR_MESSAGE);

        } else {
         if (Validation.isEmail(email.getText())) {
                firstname = firstName.getText();
                lastname = lastName.getText();
                Address = address.getText();
                City = city.getText();
                Email = email.getText();
                Mobile = mobile.getText();
                Password = password.getText();
               
                String userLevels ="user";


                String status = registerUser(firstname, lastname, Address, City, Email, Mobile, Password, userLevels);
                if (status.equals("success")) {
                    JOptionPane.showMessageDialog(this, "You have registered successful", "Message", JOptionPane.INFORMATION_MESSAGE);
                    clear();
                    TableLoad(theUsers);

                } else {
                    JOptionPane.showMessageDialog(this, "Registration unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please provide a valied email address...", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_addMouseClicked

    private void mobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mobileActionPerformed

    private void cityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityActionPerformed

    private void lastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameActionPerformed

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordActionPerformed

    private void deleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteMouseClicked
        int userNum;
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this user?", "Confirm", JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
        if (confirm == 0) {
            if (userID.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select a user to delete...", "Error", JOptionPane.ERROR_MESSAGE);

            } else {
                userNum = Integer.parseInt(userID.getText());

                User user = theUsers.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                boolean status = theUsers.removeUser(user);
                if (status) {
                    try {
                        Serialization.Serialize(theUsers, FILE_NAME_Users_FloodSensor);
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "You have deleted successful", "message", JOptionPane.INFORMATION_MESSAGE);
                    clear();
                    TableLoad(theUsers);

                } else {
                    JOptionPane.showMessageDialog(this, "Delete unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_deleteMouseClicked

    private void add1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add1MouseClicked
 
          if(jComboBox1.getSelectedIndex()==0){
                  TableLoadObserver(theUsersObserver1);
            }
          else   if(jComboBox1.getSelectedIndex()==1){
                 TableLoadObserver(theUsersObserverTwo);
          }
            else   if(jComboBox1.getSelectedIndex()==2){
                 TableLoadObserver(theUsersObserverThree);
          }
          
    }//GEN-LAST:event_add1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked

    private void add2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add2MouseClicked
   User user = theUsers.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();

        if(jComboBox1.getSelectedIndex()==0){
                sensorSet1.registerObserver(user);
                theUsersObserver1.add(user);
                try {
                    Serialization.Serialize(theUsersObserver1, FILE_NAME_Set_Users_FloodSensor1);
                JOptionPane.showMessageDialog(this, " Observer added sucsessfully", "message", JOptionPane.INFORMATION_MESSAGE);
                    System.out.println("Add Observer Sucsessfully");
                    TableLoadObserver(theUsersObserver1);
                } catch (IOException ex) {

                    System.out.println("Unsuccessful...");
                }
         }
        
        
        
          if(jComboBox1.getSelectedIndex()==1){
                sensorSetTwo.registerObserver(user);
                theUsersObserverTwo.add(user);
                try {
                    Serialization.Serialize(theUsersObserverTwo, FILE_NAME_Set_Users_FloodSensorTwo);
                    JOptionPane.showMessageDialog(this, " Observer added sucsessfully", "message", JOptionPane.INFORMATION_MESSAGE);
                    System.out.println("Add Observer Sucsessfully");
                    TableLoadObserver(theUsersObserverTwo);
                } catch (IOException ex) {

                    System.out.println("Unsuccessful...");
                }
         }
          
                  if(jComboBox1.getSelectedIndex()==2){
                sensorSetThree.registerObserver(user);
                theUsersObserverThree.add(user);
                try {
                    Serialization.Serialize(theUsersObserverThree, FILE_NAME_Set_Users_FloodSensorThree);
                    JOptionPane.showMessageDialog(this, " Observer added sucsessfully", "message", JOptionPane.INFORMATION_MESSAGE);
                    System.out.println("Add Observer Sucsessfully");
                    TableLoadObserver(theUsersObserverThree);
                } catch (IOException ex) {

                    System.out.println("Unsuccessful...");
                }
         }
    }//GEN-LAST:event_add2MouseClicked

    private void add3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add3MouseClicked

            if(jComboBox1.getSelectedIndex()==0){
      
                sensorSet1.setAvailability(statusText.getSelectedItem().toString());
                TableLoadObserver(theUsersObserver1);
          }
            else if(jComboBox1.getSelectedIndex()==1){
      
                sensorSetTwo.setAvailability(statusText.getSelectedItem().toString());
                TableLoadObserver(theUsersObserverTwo);
          }
               else if(jComboBox1.getSelectedIndex()==2){
      
                sensorSetThree.setAvailability(statusText.getSelectedItem().toString());
                TableLoadObserver(theUsersObserverThree);
          }
    }//GEN-LAST:event_add3MouseClicked

    private void add4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add4MouseClicked
   if(jComboBox1.getSelectedIndex()==0){
                    User user = theUsersObserver1.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                    sensorSet1.unregisterObserver(user);
                    JOptionPane.showMessageDialog(this, "You have Unregister Observer successful", "Message", JOptionPane.INFORMATION_MESSAGE);
          }
          else  if(jComboBox1.getSelectedIndex()==1){
                    User user = theUsersObserverTwo.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                    sensorSetTwo.unregisterObserver(user);
                    JOptionPane.showMessageDialog(this, "You have Unregister Observer successful", "Message", JOptionPane.INFORMATION_MESSAGE);
          }
          else if(jComboBox1.getSelectedIndex()==2){
                    User user = theUsersObserverThree.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                    sensorSetThree.unregisterObserver(user);
                    JOptionPane.showMessageDialog(this, "You have Unregister Observer successful", "Message", JOptionPane.INFORMATION_MESSAGE);
          }
    }//GEN-LAST:event_add4MouseClicked

    private void add5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add5MouseClicked
     if(jComboBox1.getSelectedIndex()==0){
                                User user = theUsersObserver1.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                                boolean status = theUsersObserver1.removeUser(user);
                                if (status) {
                                    //                      try {
                                        //                        Serialization.Serialize(theUsersObserver, FILE_NAME_Observer);
                                        //                    } catch (IOException ex) {
                                        //                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                                        //                    }
                                    JOptionPane.showMessageDialog(this, "You have deleted successful", "Message", JOptionPane.INFORMATION_MESSAGE);
                                    //    clear();
                                    //                    loadObserver();
                                    TableLoadObserver(theUsersObserver1);

                                } else {
                                    JOptionPane.showMessageDialog(this, "Delete unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                    }
                 
                 else  if(jComboBox1.getSelectedIndex()==1){
                                User user = theUsersObserverTwo.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                                boolean status = theUsersObserverTwo.removeUser(user);
                                if (status) {
                                    //                      try {
                                        //                        Serialization.Serialize(theUsersObserver, FILE_NAME_Observer);
                                        //                    } catch (IOException ex) {
                                        //                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                                        //                    }
                                    JOptionPane.showMessageDialog(this, "You have deleted successful", "Message", JOptionPane.INFORMATION_MESSAGE);
                                    //    clear();
                                    //                    loadObserver();
                                    TableLoadObserver(theUsersObserverTwo);

                                } else {
                                    JOptionPane.showMessageDialog(this, "Delete unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                    }
                 
                      else  if(jComboBox1.getSelectedIndex()==2){
                                User user = theUsersObserverThree.getMemberFromNumber(Integer.parseInt(userID.getText())).firstElement();
                                boolean status = theUsersObserverThree.removeUser(user);
                                if (status) {
                                    //                      try {
                                        //                        Serialization.Serialize(theUsersObserver, FILE_NAME_Observer);
                                        //                    } catch (IOException ex) {
                                        //                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                                        //                    }
                                    JOptionPane.showMessageDialog(this, "You have deleted successful", "Message", JOptionPane.INFORMATION_MESSAGE);
                                    //    clear();
                                    //                    loadObserver();
                                    TableLoadObserver(theUsersObserverThree);

                                } else {
                                    JOptionPane.showMessageDialog(this, "Delete unsuccessful...", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                    }
    }//GEN-LAST:event_add5MouseClicked

    private void add6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add6MouseClicked
  if(jComboBox1.getSelectedIndex()==0){
                    try {
                        Serialization.Serialize(theUsersObserver1, FILE_NAME_Set_Users_FloodSensor1);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        }
        
      if(jComboBox1.getSelectedIndex()==1){
                    try {
                        Serialization.Serialize(theUsersObserverTwo, FILE_NAME_Set_Users_FloodSensorTwo);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        }
      
      if(jComboBox1.getSelectedIndex()==2){
                    try {
                        Serialization.Serialize(theUsersObserverThree, FILE_NAME_Set_Users_FloodSensorThree);
                        System.out.println("Serialize");
                    } catch (IOException ex) {
                        Logger.getLogger(MyProfile.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println("Error");
                    }
        }
      JOptionPane.showMessageDialog(this, "You have save successful", "Message", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_add6MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
         BinSensor binsensor = new BinSensor();
         binsensor.setVisible(true);
    }//GEN-LAST:event_jLabel3MouseClicked
    public void TableLoad( SetOfUsers searchList) {
        String[] colName = {"User ID", "First Name", "Address", "Email", "Mobile Number"};
        Object[][] object = new Object[searchList.size()][5];
        int i = 0;
        if (searchList.size() != 0) {
            for (User member : searchList) {
                object[i][0] = member.getMemberNumber();
                object[i][1] = member.getName();
                object[i][2] = member.getAddress();
                object[i][3] = member.getUsername();
                object[i][4] = member.getMobile();
            

                i++;

            }
        }
        
        DefaultTableModel model = new DefaultTableModel(object, colName) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        jTable2.setModel(model);
        jTable2.setRowSorter(new TableRowSorter<>(model));
        jTable2.setAutoscrolls(true);
        jTable2.getTableHeader().setReorderingAllowed(false);
     }
    
       public void TableLoadObserver( SetOfUsers searchList) {
        String[] colName = {"User ID", "First Name", "Address", "Email", "Mobile Number", "Availabiliy"};
        Object[][] object = new Object[searchList.size()][6];
        int i = 0;
        if (searchList.size() != 0) {
            for (User member : searchList) {
                object[i][0] = member.getMemberNumber();
                object[i][1] = member.getName();
                object[i][2] = member.getAddress();
                object[i][3] = member.getUsername();
                object[i][4] = member.getMobile();
                object[i][5] = member.getAvailabiliy();

                i++;

            }
        }
        
        DefaultTableModel model = new DefaultTableModel(object, colName) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;//This causes all cells to be not editable
            }
        };
        jTable1.setModel(model);
        jTable1.setRowSorter(new TableRowSorter<>(model));
        jTable1.setAutoscrolls(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
     }
     

       
       
               public void setObserver(SensorMonitor sensorMoni){
            
                            int i = 0;
                    if (sensorMoni.size() != 0) {
                        for (Sensor sensors : sensorMoni) {
                          if(i ==0){
                              System.out.println(sensors.getSensorNo());
                               sensorSet1.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                               sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                jComboBox1.addItem(sensors.getName());
                          }
                            if(i ==1){
                                System.out.println(sensors.getSensorNo());
                               sensorSetTwo.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                             jComboBox1.addItem(sensors.getName());
                            }
                              if(i ==2){System.out.println(sensors.getSensorNo());
                                 sensorSetThree.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                                 sensorSetClock.addNewSensor(new Sensor(sensors.getName(), sensors.getdescription(),sensors.getfrequency(),sensors.getStatus()));
                               jComboBox1.addItem(sensors.getName());
                              }

                            i++;

                        }
                    }
            clock.registerObserver(sensorSetClock);
            
                             
            
         }
               
                  public void load(){
        try { 
             for (Sensor sensors : Serialization.deserializeFloodSensors()) {
                         sensorSet.addNewSensor(sensors);
                       
//                          products.print();
            }
        } catch (IOException | ClassNotFoundException  ex) {
            JOptionPane.showMessageDialog(this, ex);
        
        }
       
          setObserver(sensorSet);
    }  
       
       
     public String registerUser(String firstName, String lastName, String address, String city, String email, String mobile, String password, String userLevels) {
        String status = "";
        new User.SingletonBuilder(firstName, lastName, address, userLevels, email, mobile, password).city(city).build();
        theUsers.addUser(User.getInstance());
        try {
            Serialization.Serialize(theUsers, FILE_NAME_Users_FloodSensor);
            status = "success";
        } catch (Exception ex) {
            status = "fail";
            System.out.println(ex.getMessage());
        }

        return status;
    }
       
            
        public void getUser(){
                try {
            for (User member : Serialization.deserializeFloodUsers()) {
                theUsers.addUser(member);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        TableLoad(theUsers);
            }
        
               public void clear() {
        userID.setText("");
//        comboUserLevel.setSelectedItem("Customer");
        firstName.setText("");
        lastName.setText("");
        address.setText("");
        city.setText("");
        email.setText("");
        password.setText("");
        mobile.setText("");
       

        theUsers.removeAll(theUsers);
        try {
            for (User user : Serialization.deserializeFloodUsers()) {
                theUsers.addUser(user);
                user.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
        
           private void loadObserverOne() {
        try {
            for (User member : Serialization.deserializeFloodUsersOne()) {
                 sensorSet1.registerObserver(member);
                 theUsersObserver1.add(member);
//               TableLoadObserver(theUsersObserver1);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
           
          private void loadObserverTwo() {
        try {
            for (User member : Serialization.deserializeFloodUsersTwo()) {
                 sensorSetTwo.registerObserver(member);
                 theUsersObserverTwo.add(member);
//                 TableLoadObserver(theUsersObserverTwo);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
          
          
      private void loadObserverThree() {
        try {
            for (User member : Serialization.deserializeFloodUsersThree()) {
                 sensorSetThree.registerObserver(member);
                 theUsersObserverThree.add(member);
//                 TableLoadObserver(theUsersObserverTwo);
                member.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

           
    }
            
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FloodSensorObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FloodSensorObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FloodSensorObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FloodSensorObserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FloodSensorObserver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton add1;
    private javax.swing.JButton add2;
    private javax.swing.JButton add3;
    private javax.swing.JButton add4;
    private javax.swing.JButton add5;
    private javax.swing.JButton add6;
    private javax.swing.JTextField address;
    private javax.swing.JTextField city;
    private javax.swing.JButton delete;
    private javax.swing.JTextField email;
    private javax.swing.JTextField firstName;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField lastName;
    private javax.swing.JTextField mobile;
    private javax.swing.JTextField password;
    private javax.swing.JComboBox<String> statusText;
    private javax.swing.JTextField userID;
    private javax.swing.JLabel userIDLable;
    // End of variables declaration//GEN-END:variables
}
